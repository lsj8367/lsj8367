AOP aspect oriented programming

흩어진 메소드를 한곳에 모아주는 역할을 한다고 생각하면 되겠다.

aop는 프록시 패턴을 사용한다.

@transactional 도 aop이다

빈으로 등록된 것들만 aop가 설정이 가능하고
그래서 @Component를 진행하낟
@Aspect를 사용하여 aspect임을 명시한다.

그 이후에 @Around로 어떤 어노테이션을 찾는지 명시를 해준뒤에

@Around("@annotation(abc)") 라 가정한다면

실제 구현부의 @abc 라는 어노테이션이 있으면 그 메소드를 joinpoint로써 만들어두고
기능 앞뒤로 어떤것을 수행할수 있게 around된 메소드안에서 joinpoint 앞뒤에 기능을 동작하게 한후 
joinpoint.proceed()를 통해 Object를 반환해주면 aop가 잘 동작하게 된다.


